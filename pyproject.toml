[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "keychain"
dynamic = ["version"]
keywords = ["password", "encryption", "keychain"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

authors = [{ email = "dmitriyvasil@gmail.com" }]
maintainers = [{ email = "dmitriyvasil@gmail.com" }]
description = "Simple keychain service to store and retrieve secrets"

readme = "Readme.md"
license = { file = "LICENSE" }

requires-python = ">=3.12"
dependencies = [
    "click>=8.0.0",
    "cryptography>=42.0.4, <43.0.0",
    "flask>=2.2.5, <3.0.0",
    "flask-appbuilder>=4.4.1, <5.0.0",
    "flask-limiter==3.10.0",
    "flask-migrate>=3.1.0, <4.0",
    "marshmallow>=3.0,<4.0",
    "python-dotenv>=1.0.0",
    "sqlalchemy>=1.4, <2",
]

[dependency-groups]
dev = [
    "mypy>=1.18.1",
    "pre-commit>=4.3.0",
    "ruff>=0.13.0",
]

[project.optional-dependencies]
caller = [
    "psycopg2-binary>=2.9.1, <3.0.0",
    "requests>=2.0.0, <3.0.0",
    "requests-oauthlib>=2",
]

[tool.hatch.version]
path = "keychain/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["keychain"]

[project.scripts]
keychain = "keychain.cli:main"

[project.urls]
Homepage = "https://github.com/dmitriyVasilievich1986/keychain"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py312"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["B904", "E4", "E7", "E9", "F"]
ignore = []

extend-select = ["I"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
case-sensitive = false
combine-as-imports = true
force-sort-within-sections = false
known-first-party = []
lines-after-imports = -1
order-by-type = false
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
known-third-party = [
    "alembic",
    "click",
    "cryptography",
    "dotenv",
    "flask",
    "flask_appbuilder",
    "flask_migrate",
    "marshmallow",
    "requests",
    "sqlalchemy",
    "werkzeug",
]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_unused_ignores = true
